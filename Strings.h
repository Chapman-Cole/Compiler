#ifndef STRINGS_H
#define STRINGS_H

#include <stdio.h>
#include <stdlib.h>

typedef struct string {
    char* str;
    unsigned int len;
    unsigned int __memsize;
} string;

// Always call this before using a string for any other functions
#define STRING_INIT(x) ((x) = (string){.str = NULL, .len = 0, .__memsize = 1})

// Call this macro when ready to free the contents of the string, and prepare for future use
#define STRING_FREE(x)\
    free((x).str);\
    STRING_INIT((x));

// This determines the max amount of characters that can be read from stdin in one go
#define MAX_LINE_READ 5000

// This is for use with string literals only (these are the strings generated by the compiler)
// Example: STRING("Hello World"). In this case the "Hello World" char array is created
// by the compiler as readonly memory. Thus, strings created with STRING() macro
// should only be used in contexts where they are not modified
#define STRING(x) ((string){.str = (x), .len = sizeof(x) / sizeof(x[0]) - 1 /*Subtract one because the sizeof(x) would include the null terminator*/, .__memsize = -1})

// Resizes the string to the given value, which will cause data loss if the new
// size is less than the old size
int string_resize(string* str, unsigned int size);

// Copies the buffer of the src string into the buffer of the dest string
int string_copy(string* dest, string* src);

// Adds the contents of the buffer in add to the end of the contents of the buffer
// in base. Note: base and add cannot be the same string.
int string_concat(string* dest, string* base, string* add);

// Puts the substring starting at from to to (top of range exclusive) of the src string
// in the dest string
int string_substring(string* dest, string* src, unsigned int from, unsigned int to);

// Returns the index of the find string in the src string, if it exists.
// if the find string is not found anywhere in src, then it will return -1
int string_find(string* src, string* find);

// Using from as an offset, it will then proceed to insert the insert string
// into the dest string, shifting all the other characters
int string_insert(string* dest, string* insert, unsigned int from);

// Replaces the first instance of the find string in the src string with the replace string
// If it returns true, then it was successful in replacing, and if it returns false
// then it couldn't find any instance of the find string in the src string
int string_find_replace(string* src, string* find, string* replace);

// Returns true if the strings have the same value, and false otherwise
int string_compare(string* str1, string* str2);

// Reads from the standard input and updates the str string so contain the 
// string read from the console
int string_read_console(string* str);

#endif
